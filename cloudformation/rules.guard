let SecretName = "FingerprintIntegrationSettings"
let DistributionId = "ABCDEF123456"
let FpjsBehaviorPath = "fpjs"
let FpjsGetResultPath = "result"
let FpjsAgentDownloadPath = "agent"
let FpjsPreSharedSecret = "secret-string-123"

rule check_conditions {
    Conditions.CreateCloudFrontDistribution exists
    Conditions.CreateCloudFrontDistribution is_struct

    Conditions.AttachDomainToCloudFront exists
    Conditions.AttachDomainToCloudFront is_struct
}

rule check_secret {
    Resources.FingerprintIntegrationSettingsSecret {
        Type == "AWS::SecretsManager::Secret"
        Properties {
            SecretString !empty
        }
    }
}

rule check_lambda {
    Resources.FingerprintProCloudfrontLambda {
        Type == "AWS::Serverless::Function"
        Properties {
            Handler == "fingerprintjs-pro-cloudfront-lambda-function.handler"
            Runtime == "nodejs20.x"
            CodeUri == "s3://fingerprint-pro-cloudfront-integration-lambda-function/release/lambda_latest.zip"
            Timeout == 10
        }
    }
}

rule check_lambda_role {
    Resources.FpIntLambdaFunctionExecutionRole {
        Properties {
            AssumeRolePolicyDocument {
                some Statement[*].Principal.Service == "lambda.amazonaws.com"
                some Statement[*].Principal.Service == "edgelambda.amazonaws.com"
            }            
        }
    }
}

rule check_lambda_version {
    Resources.FingerprintProCloudfrontLambdaVersion {
        Type == "AWS::Lambda::Version"        
    }
}

rule check_mgmt_lambda {
    Resources.FingerprintProMgmtLambda {
        Type == "AWS::Serverless::Function"
        Properties {
            Handler == "fingerprintjs-pro-cloudfront-mgmt-lambda-function.handler"
            Runtime == "nodejs20.x"
            CodeUri == "s3://fingerprint-pro-cloudfront-integration-lambda-function/release/mgmt_lambda_latest.zip"
            Timeout == 120
        }
    }
}

rule check_mgmt_lambda_role {
    Resources.FpMgmtLambdaFunctionExecutionRole {
        Properties {
            AssumeRolePolicyDocument {
                some Statement[*].Principal.Service == "lambda.amazonaws.com"                
            }
        }
    }
}

rule check_cache_policy {
    Resources.FingerprintProCDNCachePolicy {
        Type == "AWS::CloudFront::CachePolicy"
        Properties {
            CachePolicyConfig.MinTTL == 0
            CachePolicyConfig.MaxTTL == 180
            CachePolicyConfig.DefaultTTL == 180
        }
    }
}

rule check_cloudfront_distribution {
    Resources.CloudFrontDistribution {
        Type == "AWS::CloudFront::Distribution"
        Condition exists
    }
}

rule check_output {
    Outputs {
        LambdaFunctionName exists
        CachePolicyName exists
        CloudFrontDistributionId exists
        IsCloudFrontDistributionCreatedByDeployment exists
    }
}
